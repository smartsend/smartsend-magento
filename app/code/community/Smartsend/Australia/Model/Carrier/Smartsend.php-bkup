<?php
 
 class Smartsend_Australia_Model_Carrier_Smartsend
    extends Mage_Shipping_Model_Carrier_Abstract
    implements Mage_Shipping_Model_Carrier_Interface
{

    protected $_code = 'smartsend';

	
	public function collectRates(Mage_Shipping_Model_Rate_Request $request)
    {        
    	// Check if this method is active
		/*if (!$this->getConfigFlag('active')) 
		{
			return false;
		}
		
		// Check if this method is even applicable (shipping from Australia)
		$origCountry = Mage::getStoreConfig('shipping/origin/country_id', $this->getStore());
		if ($origCountry != "AU") 
		{
			return false;
		}

		$result = Mage::getModel('shipping/rate_result');

		// TODO: Add some more validations
		$frompcode = Mage::getStoreConfig('shipping/origin/postcode', $this->getStore());
		$topcode = $request->getDestPostcode();

		if ($request->getDestCountryId()) 
		{
			$destCountry = $request->getDestCountryId();
		} 
		else 
		{
			$destCountry = "AU";
		}

		// Here we get the weight (and convert it to grams) and set some
		// sensible defaults for other shipping parameters.	
		$sweight = (int)((float)$request->getPackageWeight() * (float)$this->getConfigData('weight_units'));
		$sheight = $swidth = $slength = 100;
		$shipping_num_boxes = 1;

		// Switch between domestic and international shipping methods based
		// on destination country.
		if($destCountry == "AU")
		{
			$arr_resp = $this->_drcRequest($frompcode, $topcode, $destCountry, $sweight, $slength, $swidth, $sheight, $shipping_num_boxes);

				
				$quote_count = ((int) $arr_resp["QUOTECOUNT"]) - 1;
        
        
        
    # ASSIGNING VALUES TO ARRAY METHODS    
    for ($x=0; $x<=$quote_count; $x++)
    {	
	$title = $this->getConfigData('name') . " " . 
								ucfirst(strtolower($arr_resp["QUOTE($x)_SERVICE"].$arr_resp["QUOTE($x)_ESTIMATEDTRANSITTIME"])) ;
        
    
   }
    

        foreach($resultarr as $key1 => $value1)
		{
			$title = $this->getConfigData('name') . " " . 
								ucfirst(strtolower()) ;
						$method = $this->_createMethod($request, $this->_code, $title, $arr_resp["QUOTE({$x})_TOTAL"], $arr_resp["QUOTE({$x})_TOTAL"]);
						$result->append($method);
		
		}

        
     
    
   
				
        return $result;*/
		
		if (!$this->getConfigFlag('active')) {
            return false;
        }

        $freeBoxes = 0;
        if ($request->getAllItems()) {
            foreach ($request->getAllItems() as $item) {

                if ($item->getProduct()->isVirtual() || $item->getParentItem()) {
                    continue;
                }

                if ($item->getHasChildren() && $item->isShipSeparately()) {
                    foreach ($item->getChildren() as $child) {
                        if ($child->getFreeShipping() && !$child->getProduct()->isVirtual()) {
                            $freeBoxes += $item->getQty() * $child->getQty();
                        }
                    }
                } elseif ($item->getFreeShipping()) {
                    $freeBoxes += $item->getQty();
                }
            }
        }
        $this->setFreeBoxes($freeBoxes);
        $result = Mage::getModel('shipping/rate_result');
        if ($this->getConfigData('type') == 'O') { // per order
            $shippingPrice = $this->getConfigData('price');
        } elseif ($this->getConfigData('type') == 'I') { // per item
            $shippingPrice = ($request->getPackageQty() * $this->getConfigData('price')) - ($this->getFreeBoxes() * $this->getConfigData('price'));
        } else {
            $shippingPrice = false;
        }

        $shippingPrice = $this->getFinalPriceWithHandlingFee($shippingPrice);

        if ($shippingPrice !== false) {
            $method = Mage::getModel('shipping/rate_result_method');

            $method->setCarrier('smartsend');
            $method->setCarrierTitle($this->getConfigData('title'));

            $method->setMethod('smartsend');
            $method->setMethodTitle($this->getConfigData('name'));

            if ($request->getFreeShipping() === true || $request->getPackageQty() == $this->getFreeBoxes()) {
                $shippingPrice = '0.00';
            }


            $method->setPrice($shippingPrice);
            $method->setCost($shippingPrice);

            $result->append($method);
        }

        return $result;
    }
    
    protected function _createMethod($request, $method_code, $title, $price, $cost)
    {
		$method = Mage::getModel('shipping/rate_result_method');

		$method->setCarrier('smartsendship');
		$method->setCarrierTitle($this->getConfigData('title'));

		$method->setMethod($method_code);
		$method->setMethodTitle($title);

		$method->setPrice($this->getFinalPriceWithHandlingFee($price));
		$method->setCost($cost);
		
		return $method;
    }
    
    
    
	protected function _drcRequest($service, $fromPostCode, $toPostCode, $destCountry, $weight, $length, $width, $height, $num_boxes)
	{
		
		
		$Description = "CARTON";
		
		$post_url = "http://api.dev.smartsend.com.au/";    
    
    $post_param_values["METHOD"]                = "GetQuote";
    $post_param_values["FROMCOUNTRYCODE"]       = MODULE_SHIPPING_SMARTSEND_COUNTRYCODE;
    $post_param_values["FROMPOSTCODE"]          = MODULE_SHIPPING_SMARTSEND_POSTCODE; //"2000";
    $post_param_values["FROMSUBURB"]            = MODULE_SHIPPING_SMARTSEND_SUBURB; //"SYDNEY";
    $post_param_values["TOCOUNTRYCODE"]         = $tocountrycode;
    $post_param_values["TOPOSTCODE"]            = $topostcode;
    $post_param_values["TOSUBURB"]              = $tosuburb;
    $post_param_values["RECEIPTEDDELIVERY"]     = MODULE_SHIPPING_SMARTSEND_RECEIPTEDDELIVERY;
   // $post_param_values["TRANSPORTASSURANCE"]    = '10.00';

        
    # tail lift - init    
    $taillift = array();
    
    $key = 0;
               
        
        $post_value_items["ITEM({$key})_HEIGHT"]         =  $height;
        $post_value_items["ITEM({$key})_LENGTH"]         =  $length;
        $post_value_items["ITEM({$key})_DEPTH"]          =  $width;
        $post_value_items["ITEM({$key})_WEIGHT"]         =  $weight;
        $post_value_items["ITEM({$key})_DESCRIPTION"]    =  $Description;
       
                    
              
    # tail lift - choose appropriate value
    $post_param_values["TAILLIFT"] = "none";            
    if (in_array("none",  $taillift))                                               $post_param_values["TAILLIFT"]      = "none";           
    if (in_array("atpickup",  $taillift))                                           $post_param_values["TAILLIFT"]      = "atpickup";
    if (in_array("atdestination",  $taillift))                                      $post_param_values["TAILLIFT"]      = "atdestination";
    if (in_array("atpickup",  $taillift) && in_array("atdestination",  $taillift))  $post_param_values["TAILLIFT"]      = "both";
    if (in_array("both",  $taillift))                                               $post_param_values["TAILLIFT"]      = "both";   
       
    $post_final_values = array_merge($post_param_values,$post_value_items);
    
    # POST PARAMETER AND ITEMS VALUE URLENCODE
    $post_string = "";
    foreach( $post_final_values as $key => $value )
            { $post_string .= "$key=" . urlencode( $value ) . "&"; }
    $post_string = rtrim( $post_string, "& " );

    
    
    
    # START CURL PROCESS
    $request = curl_init($post_url); 
    curl_setopt($request, CURLOPT_HEADER, 0); 
    curl_setopt($request, CURLOPT_RETURNTRANSFER, 1); 
    curl_setopt($request, CURLOPT_POSTFIELDS, $post_string);
    curl_setopt($request, CURLOPT_SSL_VERIFYPEER, FALSE);
    $post_response = curl_exec($request); 
    curl_close ($request); // close curl object    
	
	
    # parse output
    parse_str($post_response, $arr_resp);
	
	
	
	return $arr_resp;
	
	}

    /**
     * Get allowed shipping methods
     *
     * @return array
     */
    public function getAllowedMethods()
    {
        return array('smartsend' => $this->getConfigData('name'));
    }
	
	
}
?>